/* Auto-generated by genmsg_cpp for file /home/red1/catkin_ws/src/introlab-ros-pkg/manyears_ros/msg/SourceInfo.msg */
#ifndef MANYEARS_ROS_MESSAGE_SOURCEINFO_H
#define MANYEARS_ROS_MESSAGE_SOURCEINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace manyears_ros
{
template <class ContainerAllocator>
struct SourceInfo_ {
  typedef SourceInfo_<ContainerAllocator> Type;

  SourceInfo_()
  : source_id(0)
  , source_pos()
  , longitude(0.0)
  , latitude(0.0)
  , source_energy(0.0)
  , separation_data()
  {
  }

  SourceInfo_(const ContainerAllocator& _alloc)
  : source_id(0)
  , source_pos(_alloc)
  , longitude(0.0)
  , latitude(0.0)
  , source_energy(0.0)
  , separation_data(_alloc)
  {
  }

  typedef uint32_t _source_id_type;
  uint32_t source_id;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _source_pos_type;
   ::geometry_msgs::Point_<ContainerAllocator>  source_pos;

  typedef float _longitude_type;
  float longitude;

  typedef float _latitude_type;
  float latitude;

  typedef float _source_energy_type;
  float source_energy;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _separation_data_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  separation_data;


  typedef boost::shared_ptr< ::manyears_ros::SourceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manyears_ros::SourceInfo_<ContainerAllocator>  const> ConstPtr;
}; // struct SourceInfo
typedef  ::manyears_ros::SourceInfo_<std::allocator<void> > SourceInfo;

typedef boost::shared_ptr< ::manyears_ros::SourceInfo> SourceInfoPtr;
typedef boost::shared_ptr< ::manyears_ros::SourceInfo const> SourceInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manyears_ros::SourceInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manyears_ros::SourceInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manyears_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::SourceInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::SourceInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manyears_ros::SourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22088cbc0ac843029ea89ced1f2c12b4";
  }

  static const char* value(const  ::manyears_ros::SourceInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22088cbc0ac84302ULL;
  static const uint64_t static_value2 = 0x9ea89ced1f2c12b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::manyears_ros::SourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manyears_ros/SourceInfo";
  }

  static const char* value(const  ::manyears_ros::SourceInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manyears_ros::SourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Tracked source information\n\
uint32 source_id\n\
geometry_msgs/Point source_pos\n\
float32 longitude   # In degrees\n\
float32 latitude    # In degrees \n\
float32 source_energy\n\
float32[] separation_data # Separation data (audio stream)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::manyears_ros::SourceInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manyears_ros::SourceInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.source_id);
    stream.next(m.source_pos);
    stream.next(m.longitude);
    stream.next(m.latitude);
    stream.next(m.source_energy);
    stream.next(m.separation_data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SourceInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manyears_ros::SourceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manyears_ros::SourceInfo_<ContainerAllocator> & v) 
  {
    s << indent << "source_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source_id);
    s << indent << "source_pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.source_pos);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "source_energy: ";
    Printer<float>::stream(s, indent + "  ", v.source_energy);
    s << indent << "separation_data[]" << std::endl;
    for (size_t i = 0; i < v.separation_data.size(); ++i)
    {
      s << indent << "  separation_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.separation_data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANYEARS_ROS_MESSAGE_SOURCEINFO_H

