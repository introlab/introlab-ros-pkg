/* Auto-generated by genmsg_cpp for file /home/red1/catkin_ws/src/introlab-ros-pkg/manyears_ros/msg/ManyEarsTrackedAudioSource.msg */
#ifndef MANYEARS_ROS_MESSAGE_MANYEARSTRACKEDAUDIOSOURCE_H
#define MANYEARS_ROS_MESSAGE_MANYEARSTRACKEDAUDIOSOURCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include <manyears_ros/SourceInfo.h>

namespace manyears_ros
{
template <class ContainerAllocator>
struct ManyEarsTrackedAudioSource_ {
  typedef ManyEarsTrackedAudioSource_<ContainerAllocator> Type;

  ManyEarsTrackedAudioSource_()
  : header()
  , sequence(0)
  , tracked_sources()
  {
  }

  ManyEarsTrackedAudioSource_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , sequence(0)
  , tracked_sources(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _sequence_type;
  uint32_t sequence;

  typedef std::vector< ::manyears_ros::SourceInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::manyears_ros::SourceInfo_<ContainerAllocator> >::other >  _tracked_sources_type;
  std::vector< ::manyears_ros::SourceInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::manyears_ros::SourceInfo_<ContainerAllocator> >::other >  tracked_sources;


  typedef boost::shared_ptr< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator>  const> ConstPtr;
}; // struct ManyEarsTrackedAudioSource
typedef  ::manyears_ros::ManyEarsTrackedAudioSource_<std::allocator<void> > ManyEarsTrackedAudioSource;

typedef boost::shared_ptr< ::manyears_ros::ManyEarsTrackedAudioSource> ManyEarsTrackedAudioSourcePtr;
typedef boost::shared_ptr< ::manyears_ros::ManyEarsTrackedAudioSource const> ManyEarsTrackedAudioSourceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manyears_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001908c0eeb8958ce0b3f7443ad1ff4d";
  }

  static const char* value(const  ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x001908c0eeb8958cULL;
  static const uint64_t static_value2 = 0xe0b3f7443ad1ff4dULL;
};

template<class ContainerAllocator>
struct DataType< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manyears_ros/ManyEarsTrackedAudioSource";
  }

  static const char* value(const  ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
Header header\n\
\n\
#id\n\
uint32 sequence\n\
\n\
#Array of tracked sources\n\
manyears_ros/SourceInfo[] tracked_sources\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: manyears_ros/SourceInfo\n\
#Tracked source information\n\
uint32 source_id\n\
geometry_msgs/Point source_pos\n\
float32 longitude   # In degrees\n\
float32 latitude    # In degrees \n\
float32 source_energy\n\
float32[] separation_data # Separation data (audio stream)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.sequence);
    stream.next(m.tracked_sources);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ManyEarsTrackedAudioSource_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manyears_ros::ManyEarsTrackedAudioSource_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sequence: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "tracked_sources[]" << std::endl;
    for (size_t i = 0; i < v.tracked_sources.size(); ++i)
    {
      s << indent << "  tracked_sources[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::manyears_ros::SourceInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.tracked_sources[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANYEARS_ROS_MESSAGE_MANYEARSTRACKEDAUDIOSOURCE_H

