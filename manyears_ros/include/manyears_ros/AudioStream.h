/* Auto-generated by genmsg_cpp for file /home/red1/catkin_ws/src/introlab-ros-pkg/manyears_ros/msg/AudioStream.msg */
#ifndef MANYEARS_ROS_MESSAGE_AUDIOSTREAM_H
#define MANYEARS_ROS_MESSAGE_AUDIOSTREAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace manyears_ros
{
template <class ContainerAllocator>
struct AudioStream_ {
  typedef AudioStream_<ContainerAllocator> Type;

  AudioStream_()
  : frame_number(0)
  , stream_buffer()
  {
  }

  AudioStream_(const ContainerAllocator& _alloc)
  : frame_number(0)
  , stream_buffer(_alloc)
  {
  }

  typedef uint32_t _frame_number_type;
  uint32_t frame_number;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _stream_buffer_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  stream_buffer;


  typedef boost::shared_ptr< ::manyears_ros::AudioStream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manyears_ros::AudioStream_<ContainerAllocator>  const> ConstPtr;
}; // struct AudioStream
typedef  ::manyears_ros::AudioStream_<std::allocator<void> > AudioStream;

typedef boost::shared_ptr< ::manyears_ros::AudioStream> AudioStreamPtr;
typedef boost::shared_ptr< ::manyears_ros::AudioStream const> AudioStreamConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manyears_ros::AudioStream_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manyears_ros::AudioStream_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manyears_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::AudioStream_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manyears_ros::AudioStream_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manyears_ros::AudioStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ed157802f56fd7971c695615769bab2";
  }

  static const char* value(const  ::manyears_ros::AudioStream_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1ed157802f56fd79ULL;
  static const uint64_t static_value2 = 0x71c695615769bab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::manyears_ros::AudioStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manyears_ros/AudioStream";
  }

  static const char* value(const  ::manyears_ros::AudioStream_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manyears_ros::AudioStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Audio stream\n\
uint32 frame_number\n\
int16[] stream_buffer\n\
\n\
";
  }

  static const char* value(const  ::manyears_ros::AudioStream_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manyears_ros::AudioStream_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frame_number);
    stream.next(m.stream_buffer);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct AudioStream_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manyears_ros::AudioStream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manyears_ros::AudioStream_<ContainerAllocator> & v) 
  {
    s << indent << "frame_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_number);
    s << indent << "stream_buffer[]" << std::endl;
    for (size_t i = 0; i < v.stream_buffer.size(); ++i)
    {
      s << indent << "  stream_buffer[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.stream_buffer[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANYEARS_ROS_MESSAGE_AUDIOSTREAM_H

