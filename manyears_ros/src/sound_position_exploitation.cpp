#include <ros/ros.h>

//tf
#include <tf/tf.h>

//msg
#include <geometry_msgs/PoseStamped.h>
#include <manyears_ros/ManyEarsTrackedAudioSource.h>

namespace{

	static const std::string robot_frame_s = "base_link";

	class SourcePositionExploitation
	{
	public:
		SourcePositionExploitation(ros::NodeHandle& nh) : nh_local_("~")
		{

			pose_pub_ = nh.advertise<geometry_msgs::PoseStamped>("source_pose", 100);
			
			tracked_sources_sub_ = nh.subscribe("sources_info", 100, &SourcePositionExploitation::trackedSourcesCallback, this);
			
		}
		~SourcePositionExploitation(){}

	private:

		void trackedSourcesCallback(const manyears_ros::ManyEarsTrackedAudioSourceConstPtr& sources_ptr)
		{
            static const double PI = 3.14159;

			geometry_msgs::PoseStamped pose_msg;
			int nb_sources = sources_ptr->tracked_sources.size();

			for(int i =0; i < nb_sources; i++)
			{
                pose_msg.header.stamp = sources_ptr->header.stamp;
                pose_msg.header.frame_id = sources_ptr->header.frame_id;
                pose_msg.pose.position = sources_ptr->tracked_sources[i].source_pos;
                tf::Quaternion r;
                r.setRPY(
                    0,
                    -1.0 * sources_ptr->tracked_sources[i].latitude / 180.0 * PI,
                    sources_ptr->tracked_sources[i].longitude / 180.0 * PI);

                tf::quaternionTFToMsg(r, pose_msg.pose.orientation);
        
                pose_pub_.publish(pose_msg);
			}

		}

		ros::Publisher pose_pub_;
		ros::Subscriber tracked_sources_sub_;
		ros::NodeHandle nh_local_;

	};
}

int main(int argc, char** argv)
{
	ros::init(argc, argv, "sound_position_exploitation");
	ros::NodeHandle n;
	
	SourcePositionExploitation spe(n);
	ros::spin();
	return 0;
}

