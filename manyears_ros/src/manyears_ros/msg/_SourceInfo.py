# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from manyears_ros/SourceInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SourceInfo(genpy.Message):
  _md5sum = "22088cbc0ac843029ea89ced1f2c12b4"
  _type = "manyears_ros/SourceInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Tracked source information
uint32 source_id
geometry_msgs/Point source_pos
float32 longitude   # In degrees
float32 latitude    # In degrees 
float32 source_energy
float32[] separation_data # Separation data (audio stream)

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['source_id','source_pos','longitude','latitude','source_energy','separation_data']
  _slot_types = ['uint32','geometry_msgs/Point','float32','float32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       source_id,source_pos,longitude,latitude,source_energy,separation_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SourceInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.source_id is None:
        self.source_id = 0
      if self.source_pos is None:
        self.source_pos = geometry_msgs.msg.Point()
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.source_energy is None:
        self.source_energy = 0.
      if self.separation_data is None:
        self.separation_data = []
    else:
      self.source_id = 0
      self.source_pos = geometry_msgs.msg.Point()
      self.longitude = 0.
      self.latitude = 0.
      self.source_energy = 0.
      self.separation_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3d3f().pack(_x.source_id, _x.source_pos.x, _x.source_pos.y, _x.source_pos.z, _x.longitude, _x.latitude, _x.source_energy))
      length = len(self.separation_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.separation_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.source_pos is None:
        self.source_pos = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.source_id, _x.source_pos.x, _x.source_pos.y, _x.source_pos.z, _x.longitude, _x.latitude, _x.source_energy,) = _get_struct_I3d3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.separation_data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3d3f().pack(_x.source_id, _x.source_pos.x, _x.source_pos.y, _x.source_pos.z, _x.longitude, _x.latitude, _x.source_energy))
      length = len(self.separation_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.separation_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.source_pos is None:
        self.source_pos = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.source_id, _x.source_pos.x, _x.source_pos.y, _x.source_pos.z, _x.longitude, _x.latitude, _x.source_energy,) = _get_struct_I3d3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.separation_data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3d3f = None
def _get_struct_I3d3f():
    global _struct_I3d3f
    if _struct_I3d3f is None:
        _struct_I3d3f = struct.Struct("<I3d3f")
    return _struct_I3d3f
